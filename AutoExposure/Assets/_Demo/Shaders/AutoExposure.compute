#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

#define NUMTHREAD_X 16
#define NUMTHREAD_Y 16

struct AutoExposureParameters
{
    uint importance;
    uint luminance;
};

const float3 _RGB2Luminance = float3(0.2126, 0.7152, 0.0722);

RWTexture2D<float4> _ScreenTexture;
RWStructuredBuffer<AutoExposureParameters> _Parameters;

#pragma kernel AccumulateLuminance
[numthreads(NUMTHREAD_X, NUMTHREAD_Y, 1)]
void AccumulateLuminance(uint3 id : SV_DispatchThreadID)
{
    half2 uv = id.xy / _ScreenSize.xy;
    
    half2 uvCenter = half2(0.5, 0.5);
    half importance = pow(saturate(1.0 - (distance(uv, uvCenter) * 2.0)), 2);

    float3 screenColor = _ScreenTexture[id.xy];
    float luminance = dot(screenColor, _RGB2Luminance);
    
    uint imp = (uint) importance * 100;
    uint lum = (uint) luminance * importance * 100;

    InterlockedAdd(_Parameters[0].importance, imp);
    InterlockedAdd(_Parameters[0].luminance, lum);
    
    _ScreenTexture[id.xy] = _Parameters[0].luminance;
}

#pragma kernel ComputeTargetEV
[numthreads(1, 1, 1)]
void ComputeTargetEV(uint3 id : SV_DispatchThreadID)
{
    float avgLuminance = (float) (_Parameters[0].luminance * 0.01) / (_Parameters[0].importance * 0.01);

}

// TODO: ApplyExposure